@page "/registration"
@inject ViewModels.IRegistration _registration
@using System.ComponentModel
@inject NavigationManager NM

<section class="container">
    <MudText Typo="Typo.h4">Register</MudText>
    <EditForm Model=_registration.UserModel OnSubmit=Register>
        <MudTextField class="user-input" @bind-Value=_registration.UserModel.Name Label="Name" Variant="Variant.Filled" />
        <MudTextField class="user-input" @bind-Value=_registration.UserModel.Email Label="Email" Variant="Variant.Filled" />
        <MudTextField class="user-input" @bind-Value=_registration.UserModel.Password Label="Password" Variant="Variant.Filled" />
        <div class="submit">
            <MudButton Class="user-btn" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
            <NavLink class="registration-nav-link" href="login">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary">Login Instead</MudButton>
            </NavLink>        
        </div>
    </EditForm>

<ul>
    @if (_registration.Status is not null)
    {
        @foreach (string err in _registration.Status.Errors)
        {
            <li>@err</li>
        }
    }
</ul>

</section>

@code 
{
    protected override void OnInitialized() => 
        _registration.PropertyChanged += StatusChange;


    private void StatusChange(object? sender, PropertyChangedEventArgs a)
    {
        _registration.UserModel.Password = string.Empty;
        if (_registration.Status.Success)
            NM.NavigateTo("/login");
        else
            StateHasChanged();
    }
    private async Task Register()
    {
        await _registration.RegisterUser();
    }
}
